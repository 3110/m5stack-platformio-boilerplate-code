[platformio]
; default_envs = m5stack-basic
; default-envs = m5stack-fire
; default-envs = m5stack-m5go
; default_envs = m5stack-core2
; default_envs = m5stack-cores3
; default_envs = m5stack-cores3-m5unified
; default_envs = m5stick-c
; default_envs = m5stick-c-plus
; default_envs = m5stack-atom-matrix
; default_envs = m5stack-atom-lite
; default_envs = m5stack-atom-echo
; default_envs = m5stack-atom-u
; default_envs = m5stack-atom-matrix-m5unified
; default_envs = m5stack-atom-lite-m5unified
; default_envs = m5stack-atom-echo-m5unified
; default_envs = m5stack-atom-u-m5unified
; default_envs = m5stack-atoms3
; default_envs = m5stack-atoms3-lite
; default_envs = m5stack-atoms3-u
; default_envs = m5stack-atoms3-m5unified
; default_envs = m5stack-atoms3-lite-m5unified
; default_envs = m5stack-atoms3-u-m5unified
; default_envs = m5stack-coreink
; default_envs = m5stack-paper
; default_envs = m5stack-stamps3
; default_envs = m5stack-stamps3-m5unified
; default_envs = m5stack-capsule-m5unified

[env]
platform = espressif32@^6.4.0
framework = arduino

monitor_speed = 115200
monitor_filters = esp32_exception_decoder, time
upload_speed = 1500000
board_build.f_cpu = 240000000L
board_build.f_flash = 80000000L
board_build.mcu = esp32
board_build.flash_mode = dio
; https://github.com/espressif/arduino-esp32/tree/master/tools/partitions
; board_build.partitions = no_ota.csv

; build_type = release
build_type = debug
build_flags = -DCORE_DEBUG_LEVEL=4 -DDEBUG

lib_deps =

lib_ldf_mode = deep+

; upload_port = COM16
; monitor_port = ${env.upload_port}

[m5unified]
build_flags =
    -DUSE_M5UNIFIED
lib_deps =
    M5Unified

[fastled]
build_flags =
    -DUSE_FASTLED
lib_deps =
    fastled/FastLED

[m5unified-fastled]
extends = fastled
build_flags =
    ${fastled.build_flags}
    ${m5unified.build_flags}
lib_deps =
    ${fastled.lib_deps}
    ${m5unified.lib_deps}

[env:m5stack-basic]
board = m5stack-core-esp32
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5Stack

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-fire.html
[env:m5stack-fire]
board = m5stack-fire
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5Stack

[env:m5stack-m5go]
board = m5stack-fire
board_build.extra_flags = ; https://github.com/platformio/platform-espressif32/blob/master/boards/m5stack-fire.json
    -DARDUINO_M5STACK_FIRE
    ; Comment out the following because M5GO has no PSRAM
    ;-DBOARD_HAS_PSRAM
    ;-mfix-esp32-psram-cache-issue
    ;-mfix-esp32-psram-cache-strategy=memw
build_flags =
    ${env:m5stack-fire.build_flags}
lib_deps =
    ${env:m5stack-fire.lib_deps}

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-core2.html
[env:m5stack-core2]
board = m5stack-core2
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5Core2

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-cores3.html
[env:m5stack-cores3]
board = m5stack-cores3
board_build.mcu = esp32s3
build_flags =
    ${env.build_flags}
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
lib_deps =
    ${env.lib_deps}
    https://github.com/Tinyu-Zhao/BMI270_Sensor
    https://github.com/m5stack/M5CoreS3

[env:m5stack-cores3-m5unified]
extends = env:m5stack-cores3, m5unified
build_flags =
    ${env:m5stack-core3.build_flags}
    ${m5unified.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT

# https://docs.platformio.org/en/latest/boards/espressif32/m5stick-c.html
[env:m5stick-c]
board = m5stick-c
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5StickC

[env:m5stick-c-plus]
board = m5stick-c
build_flags =
    ${env.build_flags}
    -DARDUINO_M5Stick_C_PLUS
lib_deps =
    ${env.lib_deps}
    m5stack/M5StickCPlus

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-atom.html
[m5stack-atom]
extends = fastled
board = m5stack-atom
build_flags =
    ${env.build_flags}
    ${fastled.build_flags}
lib_deps =
    ${env.lib_deps}
    ${fastled.lib_deps}

[m5stack-atom-matrix]
extends = m5stack-atom
build_flags =
    ${m5stack-atom.build_flags}
    -DARDUINO_M5Stack_ATOM_MATRIX
lib_deps =
    ${m5stack-atom.lib_deps}

[m5stack-atom-lite]
extends = m5stack-atom
build_flags =
    ${m5stack-atom.build_flags}
    -DARDUINO_M5Stack_ATOM_LITE
lib_deps =
    ${m5stack-atom.lib_deps}

[m5stack-atom-echo]
extends = m5stack-atom
build_flags =
    ${m5stack-atom.build_flags}
    -DARDUINO_M5Stack_ATOM_ECHO
lib_deps =
    ${m5stack-atom.lib_deps}

[m5stack-atom-u]
extends = m5stack-atom
build_flags =
    ${m5stack-atom.build_flags}
    -DARDUINO_M5Stack_ATOM_U
lib_deps =
    ${m5stack-atom.lib_deps}

[env:m5stack-atom-matrix]
extends = m5stack-atom-matrix
build_flags =
    ${m5stack-atom-matrix.build_flags}
lib_deps =
    ${m5stack-atom-matrix.lib_deps}
    m5stack/M5Atom

[env:m5stack-atom-lite]
extends = m5stack-atom-lite
build_flags =
    ${m5stack-atom-lite.build_flags}
lib_deps =
    ${m5stack-atom-lite.lib_deps}
    m5stack/M5Atom

[env:m5stack-atom-echo]
extends = m5stack-atom-echo
build_flags =
    ${m5stack-atom-echo.build_flags}
lib_deps =
    ${m5stack-atom-echo.lib_deps}
    m5stack/M5Atom

[env:m5stack-atom-u]
extends = m5stack-atom-u
build_flags =
    ${m5stack-atom-u.build_flags}
lib_deps =
    ${m5stack-atom-u.lib_deps}
    m5stack/M5Atom

[env:m5stack-atom-matrix-m5unified]
extends = m5unified, m5stack-atom-matrix
build_flags =
    ${m5unified.build_flags}
    ${m5stack-atom-matrix.build_flags}
lib_deps =
    ${m5unified.lib_deps}
    ${m5stack-atom-matrix.lib_deps}

[env:m5stack-atom-lite-m5unified]
extends = m5unified, m5stack-atom-lite
build_flags =
    ${m5unified.build_flags}
    ${m5stack-atom-lite.build_flags}
lib_deps =
    ${m5unified.lib_deps}
    ${m5stack-atom-lite.lib_deps}

[env:m5stack-atom-echo-m5unified]
extends = m5unified, m5stack-atom-echo
build_flags =
    ${m5unified.build_flags}
    ${m5stack-atom-echo.build_flags}
lib_deps =
    ${m5unified.lib_deps}
    ${m5stack-atom-echo.lib_deps}

[env:m5stack-atom-u-m5unified]
extends = m5unified, m5stack-atom-u
build_flags =
    ${m5unified.build_flags}
    ${m5stack-atom-u.build_flags}
lib_deps =
    ${m5unified.lib_deps}
    ${m5stack-atom-u.lib_deps}

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-atoms3.html
[m5stack-atoms3]
board = m5stack-atoms3
board_build.mcu = esp32s3
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}

[m5stack-atoms3-lite]
extends = m5stack-atoms3
build_flags =
    ${m5stack-atoms3.build_flags}
    -DARUDINO_M5STACK_ATOMS3_LITE
lib_deps =
    ${m5stack-atoms3.lib_deps}

[m5stack-atoms3-u]
extends = m5stack-atoms3
build_flags =
    ${m5stack-atoms3.build_flags}
    -DARUDINO_M5STACK_ATOMS3_U
lib_deps =
    ${m5stack-atoms3.lib_deps}

[env:m5stack-atoms3]
extends = fastled, m5stack-atoms3
build_flags =
    ${fastled.build_flags}
    ${m5stack-atoms3.build_flags}
lib_deps =
    ${fastled.lib_deps}
    ${m5stack-atoms3.lib_deps}
    m5stack/M5AtomS3 # depends FastLED ...

[env:m5stack-atoms3-lite]
extends = fastled, m5stack-atoms3-lite
build_flags =
    ${fastled.build_flags}
    ${m5stack-atoms3-lite.build_flags}
lib_deps =
    ${fastled.lib_deps}
    ${m5stack-atoms3-lite.lib_deps}
    m5stack/M5AtomS3

[env:m5stack-atoms3-u]
extends = fastled, m5stack-atoms3-u
build_flags =
    ${fastled.build_flags}
    ${m5stack-atoms3-u.build_flags}
lib_deps =
    ${fastled.lib_deps}
    ${m5stack-atoms3-u.lib_deps}
    m5stack/M5AtomS3

[env:m5stack-atoms3-m5unified]
extends = m5unified, m5stack-atoms3
build_flags =
    ${m5stack-atoms3.build_flags}
    ${m5unified.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT
lib_deps =
    ${m5stack-atoms3.lib_deps}
    ${m5unified.lib_deps}

[env:m5stack-atoms3-lite-m5unified]
extends = m5unified-fastled, m5stack-atoms3-lite
build_flags =
    ${m5unified-fastled.build_flags}
    ${m5stack-atoms3-lite.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT
lib_deps =
    ${m5unified-fastled.lib_deps}
    ${m5stack-atoms3-lite.lib_deps}

[env:m5stack-atoms3-u-m5unified]
extends = m5unified-fastled, m5stack-atoms3-u
build_flags =
    ${m5unified-fastled.build_flags}
    ${m5stack-atoms3-u.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT
lib_deps =
    ${m5unified-fastled.lib_deps}
    ${m5stack-atoms3-u.lib_deps}

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-coreink.html
[env:m5stack-coreink]
board = m5stack-coreink
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5Core-Ink

[env:m5stack-paper]
board = m5stack-fire
board_build.extra_flags =
    -DARDUINO_M5Stack_Paper
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
    -mfix-esp32-psram-cache-strategy=memw
board_build.partitions = default_16MB.csv
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    m5stack/M5EPD

# https://docs.platformio.org/en/latest/boards/espressif32/m5stack-stamps3.html
[env:m5stack-stamps3]
extends = fastled
board = m5stack-stamps3
board_build.mcu = esp32s3
build_flags =
    ${env.build_flags}
    ${fastled.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT
    -DARDUINO_USB_MODE
    # Workaround for https://github.com/espressif/arduino-esp32/issues/8185
    -DSS=34
    -DMOSI=35
    -DMISO=37
    -DSCK=36
lib_deps =
    ${env.lib_deps}
    ${fastled.lib_deps}

[env:m5stack-stamps3-m5unified]
extends = m5unified, env:m5stack-stamps3
build_flags =
    ${m5unified.build_flags}
    ${env:m5stack-stamps3.build_flags}
lib_deps =
    ${m5unified.lib_deps}
    ${env:m5stack-stamps3.lib_deps}

[env:m5stack-capsule-m5unified]
extends = env:m5stack-stamps3-m5unified
build_flags =
    ${env:m5stack-stamps3-m5unified.build_flags}
    -DARDUINO_M5STACK_CAPSULE
